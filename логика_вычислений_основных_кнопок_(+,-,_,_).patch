Index: app/src/main/java/com/technocopy/android1/CalculatorActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/technocopy/android1/CalculatorActivity.java	(revision 4e19792bac00316ff20f2012a810643a524ebf13)
+++ app/src/main/java/com/technocopy/android1/CalculatorActivity.java	(date 1611067660000)
@@ -31,7 +31,7 @@
 
         int[] actId = new int[]{
                 R.id.buttonBrackets, R.id.buttonProcent, R.id.buttonOposit, R.id.buttonDot, R.id.buttonDivide,
-                R.id.buttonMult, R.id.buttonPlus, R.id.buttonMinus
+                R.id.buttonMult, R.id.buttonPlus, R.id.buttonMinus, R.id.buttonEqual
         };
         txt = findViewById(R.id.tvOut);
         calculatorLogic = new CalculatorLogic();
@@ -45,9 +45,12 @@
             }
         };
 
-        View.OnClickListener actionClick = v -> {
-            calculatorLogic.onActionPress(v.getId()); // передаем id действия
-            txt.setText(calculatorLogic.getText());
+        View.OnClickListener actionClick = new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                calculatorLogic.onActionPress(v.getId()); // передаем id действия
+                txt.setText(calculatorLogic.getText());
+            }
         };
 
         // передаем в класс логики id нажатой кнопки, опрелелив ее в массиве
Index: app/src/main/java/com/technocopy/android1/CalculatorLogic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/technocopy/android1/CalculatorLogic.java	(revision 4e19792bac00316ff20f2012a810643a524ebf13)
+++ app/src/main/java/com/technocopy/android1/CalculatorLogic.java	(date 1611067546000)
@@ -1,37 +1,46 @@
 package com.technocopy.android1;
 
-import androidx.constraintlayout.solver.state.State;
-
 public class CalculatorLogic {
 
-    StringBuilder inputString = new StringBuilder();
+    private StringBuilder inputString = new StringBuilder();
     private int argFirst;
     private int argSecond;
-
     private State state;
+    private int action;
+
+    // перечисляем аргументы действия
+    private enum State {
+        argFirstInput,
+        argSecondInput,
+        result
+    }
 
 
     // конструктор для поля с первым числом
     public CalculatorLogic() {
-
         state = State.argFirstInput;
     }
 
     // нажатие на кнопки с цифрами
     public void onNumPress(int id) {
+        if (state == State.result) {
+            state = State.argFirstInput;  // если на экраен результат операции, то снова вводим первое число
+//            inputString.setLength(0);
+
+        }
         // ограничиваем ввод чисел 15 цифрами
-        if (inputString.length() < 15){
-            switch (id){
+        if (inputString.length() < 15) {
+            switch (id) {
                 case R.id.button0:
-                    if (inputString.length() != 0){     // добавляем 0 только когда он не стоит в начале
+                    if (inputString.length() != 0) {     // добавляем 0 только когда он не стоит в начале
                         inputString.append("0");
                     }
                     break;
                 case R.id.button1:
-                        inputString.append("1");
+                    inputString.append("1");
                     break;
                 case R.id.button2:
-                        inputString.append("2");
+                    inputString.append("2");
                     break;
                 case R.id.button3:
                     inputString.append("3");
@@ -60,19 +69,55 @@
 
 
     // нажатие на кнопки действий
-    public void onActionPress(int actoinId){
+    public void onActionPress(int actoinId) {
+        if (actoinId == R.id.buttonEqual && state == State.argSecondInput) {
+            argSecond = Integer.parseInt(inputString.toString());
+            state = State.result;
+            inputString.setLength(0);
+            switch (action) {
+                case R.id.buttonDivide:
+                    inputString.append(argFirst / argSecond);
+                    break;
+                case R.id.buttonMult:
+                    inputString.append(argFirst * argSecond);
+                    break;
+                case R.id.buttonPlus:
+                    inputString.append(argFirst + argSecond);
+                    break;
+                case R.id.buttonMinus:
+                    inputString.append(argFirst - argSecond);
+                    break;
+            }
+        } else if (inputString.length() > 0 && state == State.argFirstInput) {
+            argFirst = Integer.parseInt(inputString.toString());
+            state = State.argSecondInput;
+            inputString.setLength(0);
+//            action = actoinId;
 
-    }
+            switch (actoinId) {
+                case R.id.buttonDivide:
+                    action = R.id.buttonDivide;
+                    break;
+                case R.id.buttonMult:
+                    action = R.id.buttonDivide;
+                    break;
+                case R.id.buttonPlus:
+                    action = R.id.buttonPlus;
+                    break;
+                case R.id.buttonMinus:
+                    action = R.id.buttonMinus;
+                    break;
+                case R.id.buttonEqual:
+                    action = R.id.buttonEqual;
+                    break;
+            }
 
+        }
 
-    // перечисляем аргументы действия
-    private enum State {
-        argFirstInput,
-        argSecondInput,
-        result
     }
 
-    public String getText(){
+    public String getText() {
         return inputString.toString();
+
     }
 }
